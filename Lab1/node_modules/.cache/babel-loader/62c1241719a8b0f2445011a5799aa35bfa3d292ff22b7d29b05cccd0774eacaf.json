{"ast":null,"code":"// compare\n\nvar spawn = require('cross-spawn');\nvar debug = require('debug')('gm');\nvar utils = require('./utils');\n\n/**\n * Compare two images uses graphicsmagicks `compare` command.\n *\n * gm.compare(img1, img2, 0.4, function (err, equal, equality) {\n *   if (err) return handle(err);\n *   console.log('The images are equal: %s', equal);\n *   console.log('There equality was %d', equality);\n * });\n *\n * @param {String} orig Path to an image.\n * @param {String} compareTo Path to another image to compare to `orig`.\n * @param {Number|Object} [options] Options object or the amount of difference to tolerate before failing - defaults to 0.4\n * @param {Function} cb(err, Boolean, equality, rawOutput)\n */\n\nmodule.exports = exports = function (proto) {\n  function compare(orig, compareTo, options, cb) {\n    var isImageMagick = this._options && this._options.imageMagick;\n    var appPath = this._options && this._options.appPath || '';\n    var args = ['-metric', 'mse', orig, compareTo];\n\n    // Resove executable\n    let bin;\n    switch (isImageMagick) {\n      case true:\n        bin = 'compare';\n        break;\n      case '7+':\n        bin = 'magick';\n        args.unshift('compare');\n        break;\n      default:\n        bin = 'gm';\n        args.unshift('compare');\n        break;\n    }\n\n    // Prepend app path\n    bin = appPath + bin;\n    var tolerance = 0.4;\n    // outputting the diff image\n    if (typeof options === 'object') {\n      if (options.highlightColor && options.highlightColor.indexOf('\"') < 0) {\n        options.highlightColor = '\"' + options.highlightColor + '\"';\n      }\n      if (options.file) {\n        if (typeof options.file !== 'string') {\n          throw new TypeError('The path for the diff output is invalid');\n        }\n        // graphicsmagick defaults to red\n        if (options.highlightColor) {\n          args.push('-highlight-color');\n          args.push(options.highlightColor);\n        }\n        if (options.highlightStyle) {\n          args.push('-highlight-style');\n          args.push(options.highlightStyle);\n        }\n        // For IM, filename is the last argument. For GM it's `-file <filename>`\n        if (!isImageMagick) {\n          args.push('-file');\n        }\n        args.push(options.file);\n      }\n      if (typeof options.tolerance != 'undefined') {\n        if (typeof options.tolerance !== 'number') {\n          throw new TypeError('The tolerance value should be a number');\n        }\n        tolerance = options.tolerance;\n      }\n    } else {\n      // For ImageMagick diff file is required but we don't care about it, so null it out\n      if (isImageMagick) {\n        args.push('null:');\n      }\n      if (typeof options == 'function') {\n        cb = options; // tolerance value not provided, flip the cb place\n      } else {\n        tolerance = options;\n      }\n    }\n    var cmd = bin + ' ' + args.map(utils.escape).join(' ');\n    debug(cmd);\n    var proc = spawn(bin, args);\n    var stdout = '';\n    var stderr = '';\n    proc.stdout.on('data', function (data) {\n      stdout += data;\n    });\n    proc.stderr.on('data', function (data) {\n      stderr += data;\n    });\n    proc.on('close', function (code) {\n      // ImageMagick returns err code 2 if err, 0 if similar, 1 if dissimilar\n      if (isImageMagick) {\n        if (code === 0) {\n          return cb(null, 0 <= tolerance, 0, stdout);\n        } else if (code === 1) {\n          stdout = stderr;\n        } else {\n          return cb(stderr);\n        }\n      } else {\n        if (code !== 0) {\n          return cb(stderr);\n        }\n      }\n      // Since ImageMagick similar gives err code 0 and no stdout, there's really no matching\n      // Otherwise, output format for IM is `12.00 (0.123)` and for GM it's `Total: 0.123`\n      var regex = isImageMagick ? /\\((\\d+\\.?[\\d\\-\\+e]*)\\)/m : /Total: (\\d+\\.?\\d*)/m;\n      var match = regex.exec(stdout);\n      if (!match) {\n        return cb(new Error('Unable to parse output.\\nGot ' + stdout));\n      }\n      var equality = parseFloat(match[1]);\n      cb(null, equality <= tolerance, equality, stdout, orig, compareTo);\n    });\n  }\n  if (proto) {\n    proto.compare = compare;\n  }\n  return compare;\n};","map":{"version":3,"names":["spawn","require","debug","utils","module","exports","proto","compare","orig","compareTo","options","cb","isImageMagick","_options","imageMagick","appPath","args","bin","unshift","tolerance","highlightColor","indexOf","file","TypeError","push","highlightStyle","cmd","map","escape","join","proc","stdout","stderr","on","data","code","regex","match","exec","Error","equality","parseFloat"],"sources":["/home/redundunt/WebstormProjects/untitled/node_modules/gm/lib/compare.js"],"sourcesContent":["// compare\n\nvar spawn = require('cross-spawn');\nvar debug = require('debug')('gm');\nvar utils = require('./utils');\n\n/**\n * Compare two images uses graphicsmagicks `compare` command.\n *\n * gm.compare(img1, img2, 0.4, function (err, equal, equality) {\n *   if (err) return handle(err);\n *   console.log('The images are equal: %s', equal);\n *   console.log('There equality was %d', equality);\n * });\n *\n * @param {String} orig Path to an image.\n * @param {String} compareTo Path to another image to compare to `orig`.\n * @param {Number|Object} [options] Options object or the amount of difference to tolerate before failing - defaults to 0.4\n * @param {Function} cb(err, Boolean, equality, rawOutput)\n */\n\nmodule.exports = exports = function (proto) {\n  function compare(orig, compareTo, options, cb) {\n\n    var isImageMagick = this._options && this._options.imageMagick;\n    var appPath = this._options && this._options.appPath || '';\n    var args = ['-metric', 'mse', orig, compareTo];\n\n    // Resove executable\n    let bin;\n\n    switch (isImageMagick) {\n      case true:\n        bin = 'compare';\n        break;\n      case '7+':\n        bin = 'magick'\n        args.unshift('compare');\n        break;\n      default:\n        bin = 'gm'\n        args.unshift('compare');\n        break\n    }\n\n    // Prepend app path\n    bin = appPath + bin\n\n    var tolerance = 0.4;\n    // outputting the diff image\n    if (typeof options === 'object') {\n\n      if (options.highlightColor && options.highlightColor.indexOf('\"') < 0) {\n        options.highlightColor = '\"' + options.highlightColor + '\"';\n      }\n\n      if (options.file) {\n        if (typeof options.file !== 'string') {\n          throw new TypeError('The path for the diff output is invalid');\n        }\n         // graphicsmagick defaults to red\n        if (options.highlightColor) {\n            args.push('-highlight-color');\n            args.push(options.highlightColor);\n        }\n        if (options.highlightStyle) {\n            args.push('-highlight-style')\n            args.push(options.highlightStyle)\n        }\n        // For IM, filename is the last argument. For GM it's `-file <filename>`\n        if (!isImageMagick) {\n            args.push('-file');\n        }\n        args.push(options.file);\n      }\n\n      if (typeof options.tolerance != 'undefined') {\n        if (typeof options.tolerance !== 'number') {\n          throw new TypeError('The tolerance value should be a number');\n        }\n        tolerance = options.tolerance;\n      }\n    } else {\n      // For ImageMagick diff file is required but we don't care about it, so null it out\n      if (isImageMagick) {\n        args.push('null:');\n      }\n\n      if (typeof options == 'function') {\n        cb = options; // tolerance value not provided, flip the cb place\n      } else {\n        tolerance = options\n      }\n    }\n\n    var cmd = bin + ' ' + args.map(utils.escape).join(' ')\n    debug(cmd);\n\n    var proc = spawn(bin, args);\n    var stdout = '';\n    var stderr = '';\n    proc.stdout.on('data',function(data) { stdout+=data });\n    proc.stderr.on('data',function(data) { stderr+=data });\n    proc.on('close', function (code) {\n      // ImageMagick returns err code 2 if err, 0 if similar, 1 if dissimilar\n      if (isImageMagick) {\n        if (code === 0) {\n          return cb(null, 0 <= tolerance, 0, stdout);\n        }\n        else if (code === 1) {\n          stdout = stderr;\n        } else {\n        return cb(stderr);\n        }\n      } else {\n        if(code !== 0) {\n          return cb(stderr);\n        }\n      }\n      // Since ImageMagick similar gives err code 0 and no stdout, there's really no matching\n      // Otherwise, output format for IM is `12.00 (0.123)` and for GM it's `Total: 0.123`\n      var regex = isImageMagick ? /\\((\\d+\\.?[\\d\\-\\+e]*)\\)/m : /Total: (\\d+\\.?\\d*)/m;\n      var match = regex.exec(stdout);\n      if (!match) {\n        return cb(new Error('Unable to parse output.\\nGot ' + stdout));\n      }\n\n      var equality = parseFloat(match[1]);\n      cb(null, equality <= tolerance, equality, stdout, orig, compareTo);\n    });\n  }\n\n  if (proto) {\n    proto.compare = compare;\n  }\n  return compare;\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}