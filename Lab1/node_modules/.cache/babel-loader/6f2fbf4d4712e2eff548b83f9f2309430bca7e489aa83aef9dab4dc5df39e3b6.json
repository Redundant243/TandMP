{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar spawn = require('cross-spawn');\nvar utils = require('./utils');\nvar debug = require('debug')('gm');\nvar series = require('array-series');\nvar PassThrough = require('stream').PassThrough;\n\n/**\n * Error messaging.\n */\n\nvar noBufferConcat = 'gm v1.9.0+ required node v0.8+. Please update your version of node, downgrade gm < 1.9, or do not use `bufferStream`.';\n\n/**\n * Extend proto\n */\n\nmodule.exports = function (proto) {\n  function args(prop) {\n    return function args() {\n      var len = arguments.length;\n      var a = [];\n      var i = 0;\n      for (; i < len; ++i) {\n        a.push(arguments[i]);\n      }\n      this[prop] = this[prop].concat(a);\n      return this;\n    };\n  }\n  function streamToUnemptyBuffer(stream, callback) {\n    var done = false;\n    var buffers = [];\n    stream.on('data', function (data) {\n      buffers.push(data);\n    });\n    stream.on('end', function () {\n      if (done) return;\n      done = true;\n      let result = Buffer.concat(buffers);\n      buffers = null;\n      if (result.length === 0) {\n        const err = new Error(\"Stream yields empty buffer\");\n        callback(err, null);\n      } else {\n        callback(null, result);\n      }\n    });\n    stream.on('error', function (err) {\n      done = true;\n      buffers = null;\n      callback(err);\n    });\n  }\n  proto.in = args('_in');\n  proto.out = args('_out');\n  proto._preprocessor = [];\n  proto.preprocessor = args('_preprocessor');\n\n  /**\n   * Execute the command and write the image to the specified file name.\n   *\n   * @param {String} name\n   * @param {Function} callback\n   * @return {Object} gm\n   */\n\n  proto.write = function write(name, callback) {\n    if (!callback) callback = name, name = null;\n    if (\"function\" !== typeof callback) {\n      throw new TypeError(\"gm().write() expects a callback function\");\n    }\n    if (!name) {\n      return callback(TypeError(\"gm().write() expects a filename when writing new files\"));\n    }\n    this.outname = name;\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      self._spawn(self.args(), true, callback);\n    });\n  };\n\n  /**\n   * Execute the command and return stdin and stderr\n   * ReadableStreams providing the image data.\n   * If no callback is passed, a \"through\" stream will be returned,\n   * and stdout will be piped through, otherwise the error will be passed.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback (optional)\n   * @return {Stream}\n   */\n\n  proto.stream = function stream(format, callback) {\n    if (!callback && typeof format === 'function') {\n      callback = format;\n      format = null;\n    }\n    var throughStream;\n    if (\"function\" !== typeof callback) {\n      throughStream = new PassThrough();\n      callback = function (err, stdout, stderr) {\n        if (err) throughStream.emit('error', err);else stdout.pipe(throughStream);\n      };\n    }\n    if (format) {\n      format = format.split('.').pop();\n      this.outname = format + \":-\";\n    }\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      return self._spawn(self.args(), false, callback);\n    });\n    return throughStream || this;\n  };\n\n  /**\n   * Convenience function for `proto.stream`.\n   * Simply returns the buffer instead of the stream.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback\n   * @return {null}\n   */\n\n  proto.toBuffer = function toBuffer(format, callback) {\n    if (!callback) callback = format, format = null;\n    if (\"function\" !== typeof callback) {\n      throw new Error('gm().toBuffer() expects a callback.');\n    }\n    return this.stream(format, function (err, stdout) {\n      if (err) return callback(err);\n      streamToUnemptyBuffer(stdout, callback);\n    });\n  };\n\n  /**\n    * Run any preProcessor functions in series. Used by autoOrient.\n    *\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._preprocess = function _preprocess(callback) {\n    series(this._preprocessor, this, callback);\n  };\n\n  /**\n    * Execute the command, buffer input and output, return stdout and stderr buffers.\n    *\n    * @param {String} bin\n    * @param {Array} args\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._exec = function _exec(args, callback) {\n    return this._spawn(args, true, callback);\n  };\n\n  /**\n    * Execute the command with stdin, returning stdout and stderr streams or buffers.\n    * @param {String} bin\n    * @param {Array} args\n    * @param {ReadableStream} stream\n    * @param {Boolean} shouldBuffer\n    * @param {Function} callback, signature (err, stdout, stderr) -> *\n    * @return {Object} gm\n    * @TODO refactor this mess\n    */\n\n  proto._spawn = function _spawn(args, bufferOutput, callback) {\n    var appPath = this._options.appPath || '';\n    var bin;\n\n    // Resolve executable\n    switch (this._options.imageMagick) {\n      // legacy behavior\n      case true:\n        bin = args.shift();\n        break;\n\n      // ImgeMagick >= 7\n      case '7+':\n        bin = 'magick';\n        break;\n\n      // GraphicsMagick\n      default:\n        bin = 'gm';\n        break;\n    }\n\n    // Prepend app path\n    bin = appPath + bin;\n    var cmd = bin + ' ' + args.map(utils.escape).join(' '),\n      self = this,\n      proc,\n      err,\n      timeout = parseInt(this._options.timeout),\n      disposers = this._options.disposers,\n      timeoutId;\n    debug(cmd);\n    //imageMagick does not support minify (https://github.com/aheckmann/gm/issues/385)\n    if (args.indexOf(\"-minify\") > -1 && this._options.imageMagick) {\n      return cb(new Error(\"imageMagick does not support minify, use -scale or -sample. Alternatively, use graphicsMagick\"));\n    }\n    try {\n      proc = spawn(bin, args);\n    } catch (e) {\n      return cb(e);\n    }\n    proc.stdin.once('error', cb);\n    proc.on('error', function (err) {\n      if (err.code === 'ENOENT') {\n        cb(new Error('Could not execute GraphicsMagick/ImageMagick: ' + cmd + \" this most likely means the gm/convert binaries can't be found\"));\n      } else {\n        cb(err);\n      }\n    });\n    if (timeout) {\n      timeoutId = setTimeout(function () {\n        dispose('gm() resulted in a timeout.');\n      }, timeout);\n    }\n    if (disposers) {\n      disposers.forEach(function (disposer) {\n        disposer.events.forEach(function (event) {\n          disposer.emitter.on(event, dispose);\n        });\n      });\n    }\n    if (self.sourceBuffer) {\n      proc.stdin.write(this.sourceBuffer);\n      proc.stdin.end();\n    } else if (self.sourceStream) {\n      if (!self.sourceStream.readable) {\n        return cb(new Error(\"gm().stream() or gm().write() with a non-readable stream.\"));\n      }\n      self.sourceStream.pipe(proc.stdin);\n\n      // bufferStream\n      // We convert the input source from a stream to a buffer.\n      if (self.bufferStream && !this._buffering) {\n        if (!Buffer.concat) {\n          throw new Error(noBufferConcat);\n        }\n\n        // Incase there are multiple processes in parallel,\n        // we only need one\n        self._buffering = true;\n        streamToUnemptyBuffer(self.sourceStream, function (err, buffer) {\n          self.sourceBuffer = buffer;\n          self.sourceStream = null; // The stream is now dead\n        });\n      }\n    }\n\n    // for _exec operations (identify() mostly), we also\n    // need to buffer the output stream before returning\n    if (bufferOutput) {\n      var stdout = '',\n        stderr = '',\n        onOut,\n        onErr,\n        onExit;\n      proc.stdout.on('data', onOut = function (data) {\n        stdout += data;\n      });\n      proc.stderr.on('data', onErr = function (data) {\n        stderr += data;\n      });\n      proc.on('close', onExit = function (code, signal) {\n        let err;\n        if (code !== 0 || signal !== null) {\n          err = new Error('Command failed: ' + stderr);\n          err.code = code;\n          err.signal = signal;\n        }\n        ;\n        cb(err, stdout, stderr, cmd);\n        stdout = stderr = onOut = onErr = onExit = null;\n      });\n    } else {\n      cb(null, proc.stdout, proc.stderr, cmd);\n    }\n    return self;\n    function cb(err, stdout, stderr, cmd) {\n      if (cb.called) return;\n      if (timeoutId) clearTimeout(timeoutId);\n      cb.called = 1;\n      if (args[0] !== 'identify' && bin !== 'identify') {\n        self._in = [];\n        self._out = [];\n      }\n      callback.call(self, err, stdout, stderr, cmd);\n    }\n    function dispose(msg) {\n      const message = msg ? msg : 'gm() was disposed';\n      const err = new Error(message);\n      cb(err);\n      if (proc.exitCode === null) {\n        proc.stdin.pause();\n        proc.kill();\n      }\n    }\n  };\n\n  /**\n   * Returns arguments to be used in the command.\n   *\n   * @return {Array}\n   */\n\n  proto.args = function args() {\n    var outname = this.outname || \"-\";\n    if (this._outputFormat) outname = this._outputFormat + ':' + outname;\n    return [].concat(this._subCommand, this._in, this.src(), this._out, outname).filter(Boolean); // remove falsey\n  };\n\n  /**\n   * Adds an img source formatter.\n   *\n   * `formatters` are passed an array of images which will be\n   * used as 'input' images for the command. Useful for methods\n   * like `.append()` where multiple source images may be used.\n   *\n   * @param {Function} formatter\n   * @return {gm} this\n   */\n\n  proto.addSrcFormatter = function addSrcFormatter(formatter) {\n    if ('function' != typeof formatter) throw new TypeError('sourceFormatter must be a function');\n    this._sourceFormatters || (this._sourceFormatters = []);\n    this._sourceFormatters.push(formatter);\n    return this;\n  };\n\n  /**\n   * Applies all _sourceFormatters\n   *\n   * @return {Array}\n   */\n\n  proto.src = function src() {\n    var arr = [];\n    for (var i = 0; i < this._sourceFormatters.length; ++i) {\n      this._sourceFormatters[i].call(this, arr);\n    }\n    return arr;\n  };\n\n  /**\n   * Image types.\n   */\n\n  var types = {\n    'jpg': /\\.jpe?g$/i,\n    'png': /\\.png$/i,\n    'gif': /\\.gif$/i,\n    'tiff': /\\.tif?f$/i,\n    'bmp': /(?:\\.bmp|\\.dib)$/i,\n    'webp': /\\.webp$/i\n  };\n  types.jpeg = types.jpg;\n  types.tif = types.tiff;\n  types.dib = types.bmp;\n\n  /**\n   * Determine the type of source image.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @example\n   *   if (this.inputIs('png')) ...\n   */\n\n  proto.inputIs = function inputIs(type) {\n    if (!type) return false;\n    var rgx = types[type];\n    if (!rgx) {\n      if ('.' !== type[0]) type = '.' + type;\n      rgx = new RegExp('\\\\' + type + '$', 'i');\n    }\n    return rgx.test(this.source);\n  };\n\n  /**\n   * add disposer (like 'close' of http.IncomingMessage) in order to dispose gm() with any event\n   *\n   * @param {EventEmitter} emitter\n   * @param {Array} events\n   * @return {Object} gm\n   * @example\n   *   command.addDisposer(req, ['close', 'end', 'finish']);\n   */\n\n  proto.addDisposer = function addDisposer(emitter, events) {\n    if (!this._options.disposers) {\n      this._options.disposers = [];\n    }\n    this._options.disposers.push({\n      emitter: emitter,\n      events: events\n    });\n    return this;\n  };\n};","map":{"version":3,"names":["spawn","require","utils","debug","series","PassThrough","noBufferConcat","module","exports","proto","args","prop","len","arguments","length","a","i","push","concat","streamToUnemptyBuffer","stream","callback","done","buffers","on","data","result","Buffer","err","Error","in","out","_preprocessor","preprocessor","write","name","TypeError","outname","self","_preprocess","_spawn","format","throughStream","stdout","stderr","emit","pipe","split","pop","toBuffer","_exec","bufferOutput","appPath","_options","bin","imageMagick","shift","cmd","map","escape","join","proc","timeout","parseInt","disposers","timeoutId","indexOf","cb","e","stdin","once","code","setTimeout","dispose","forEach","disposer","events","event","emitter","sourceBuffer","end","sourceStream","readable","bufferStream","_buffering","buffer","onOut","onErr","onExit","signal","called","clearTimeout","_in","_out","call","msg","message","exitCode","pause","kill","_outputFormat","_subCommand","src","filter","Boolean","addSrcFormatter","formatter","_sourceFormatters","arr","types","jpeg","jpg","tif","tiff","dib","bmp","inputIs","type","rgx","RegExp","test","source","addDisposer"],"sources":["/home/redundunt/WebstormProjects/untitled/node_modules/gm/lib/command.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar spawn = require('cross-spawn');\nvar utils = require('./utils');\nvar debug = require('debug')('gm');\nvar series = require('array-series');\nvar PassThrough = require('stream').PassThrough;\n\n/**\n * Error messaging.\n */\n\nvar noBufferConcat = 'gm v1.9.0+ required node v0.8+. Please update your version of node, downgrade gm < 1.9, or do not use `bufferStream`.';\n\n/**\n * Extend proto\n */\n\nmodule.exports = function (proto) {\n\n  function args (prop) {\n    return function args () {\n      var len = arguments.length;\n      var a = [];\n      var i = 0;\n\n      for (; i < len; ++i) {\n        a.push(arguments[i]);\n      }\n\n      this[prop] = this[prop].concat(a);\n      return this;\n    }\n  }\n\n  function streamToUnemptyBuffer(stream, callback) {\n    var done = false\n    var buffers = []\n\n    stream.on('data', function (data) {\n      buffers.push(data)\n    })\n\n    stream.on('end', function () {\n      if (done)\n        return\n\n      done = true\n      let result = Buffer.concat(buffers)\n      buffers = null\n\n      if (result.length === 0) {\n        const err = new Error(\"Stream yields empty buffer\");\n        callback(err, null);\n      } else {\n        callback(null, result);\n      }\n    })\n\n    stream.on('error', function (err) {\n      done = true\n      buffers = null\n      callback(err)\n    })\n  }\n\n  proto.in = args('_in');\n  proto.out = args('_out');\n\n  proto._preprocessor = [];\n  proto.preprocessor = args('_preprocessor');\n\n  /**\n   * Execute the command and write the image to the specified file name.\n   *\n   * @param {String} name\n   * @param {Function} callback\n   * @return {Object} gm\n   */\n\n  proto.write = function write (name, callback) {\n    if (!callback) callback = name, name = null;\n\n    if (\"function\" !== typeof callback) {\n      throw new TypeError(\"gm().write() expects a callback function\")\n    }\n\n    if (!name) {\n      return callback(TypeError(\"gm().write() expects a filename when writing new files\"));\n    }\n\n    this.outname = name;\n\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      self._spawn(self.args(), true, callback);\n    });\n  }\n\n  /**\n   * Execute the command and return stdin and stderr\n   * ReadableStreams providing the image data.\n   * If no callback is passed, a \"through\" stream will be returned,\n   * and stdout will be piped through, otherwise the error will be passed.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback (optional)\n   * @return {Stream}\n   */\n\n  proto.stream = function stream (format, callback) {\n    if (!callback && typeof format === 'function') {\n      callback = format;\n      format = null;\n    }\n\n    var throughStream;\n\n    if (\"function\" !== typeof callback) {\n      throughStream = new PassThrough();\n      callback = function (err, stdout, stderr) {\n        if (err) throughStream.emit('error', err);\n        else stdout.pipe(throughStream);\n      }\n    }\n\n    if (format) {\n      format = format.split('.').pop();\n      this.outname = format + \":-\";\n    }\n\n    var self = this;\n    this._preprocess(function (err) {\n      if (err) return callback(err);\n      return self._spawn(self.args(), false, callback);\n    });\n\n    return throughStream || this;\n  }\n\n  /**\n   * Convenience function for `proto.stream`.\n   * Simply returns the buffer instead of the stream.\n   *\n   * @param {String} format (optional)\n   * @param {Function} callback\n   * @return {null}\n   */\n\n  proto.toBuffer = function toBuffer (format, callback) {\n    if (!callback) callback = format, format = null;\n\n    if (\"function\" !== typeof callback) {\n      throw new Error('gm().toBuffer() expects a callback.');\n    }\n\n    return this.stream(format, function (err, stdout) {\n      if (err) return callback(err);\n\n      streamToUnemptyBuffer(stdout, callback);\n    })\n  }\n\n  /**\n    * Run any preProcessor functions in series. Used by autoOrient.\n    *\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._preprocess = function _preprocess (callback) {\n    series(this._preprocessor, this, callback);\n  }\n\n  /**\n    * Execute the command, buffer input and output, return stdout and stderr buffers.\n    *\n    * @param {String} bin\n    * @param {Array} args\n    * @param {Function} callback\n    * @return {Object} gm\n    */\n\n  proto._exec = function _exec (args, callback) {\n    return this._spawn(args, true, callback);\n  }\n\n  /**\n    * Execute the command with stdin, returning stdout and stderr streams or buffers.\n    * @param {String} bin\n    * @param {Array} args\n    * @param {ReadableStream} stream\n    * @param {Boolean} shouldBuffer\n    * @param {Function} callback, signature (err, stdout, stderr) -> *\n    * @return {Object} gm\n    * @TODO refactor this mess\n    */\n\n  proto._spawn = function _spawn (args, bufferOutput, callback) {\n    var appPath = this._options.appPath || '';\n    var bin\n\n    // Resolve executable\n    switch (this._options.imageMagick) {\n      // legacy behavior\n      case true:\n        bin = args.shift();\n        break;\n\n      // ImgeMagick >= 7\n      case '7+':\n        bin = 'magick'\n        break;\n\n      // GraphicsMagick\n      default:\n        bin = 'gm';\n        break;\n    }\n\n    // Prepend app path\n    bin = appPath + bin\n\n    var cmd = bin + ' ' + args.map(utils.escape).join(' ')\n      , self = this\n      , proc, err\n      , timeout = parseInt(this._options.timeout)\n      , disposers = this._options.disposers\n      , timeoutId;\n\n    debug(cmd);\n    //imageMagick does not support minify (https://github.com/aheckmann/gm/issues/385)\n    if(args.indexOf(\"-minify\") > -1 && this._options.imageMagick){\n      return cb(new Error(\"imageMagick does not support minify, use -scale or -sample. Alternatively, use graphicsMagick\"));\n    }\n    try {\n      proc = spawn(bin, args);\n    } catch (e) {\n      return cb(e);\n    }\n    proc.stdin.once('error', cb);\n\n    proc.on('error', function(err){\n      if (err.code === 'ENOENT') {\n        cb(new Error('Could not execute GraphicsMagick/ImageMagick: '+cmd+\" this most likely means the gm/convert binaries can't be found\"));\n      } else {\n        cb(err);\n      }\n    });\n\n    if (timeout) {\n      timeoutId = setTimeout(function(){\n        dispose('gm() resulted in a timeout.');\n      }, timeout);\n    }\n\n    if (disposers) {\n      disposers.forEach(function(disposer) {\n        disposer.events.forEach(function(event) {\n          disposer.emitter.on(event, dispose);\n        });\n      });\n    }\n\n    if (self.sourceBuffer) {\n      proc.stdin.write(this.sourceBuffer);\n      proc.stdin.end();\n    } else if (self.sourceStream) {\n\n      if (!self.sourceStream.readable) {\n        return cb(new Error(\"gm().stream() or gm().write() with a non-readable stream.\"));\n      }\n\n      self.sourceStream.pipe(proc.stdin);\n\n      // bufferStream\n      // We convert the input source from a stream to a buffer.\n      if (self.bufferStream && !this._buffering) {\n        if (!Buffer.concat) {\n          throw new Error(noBufferConcat);\n        }\n\n        // Incase there are multiple processes in parallel,\n        // we only need one\n        self._buffering = true;\n\n        streamToUnemptyBuffer(self.sourceStream, function (err, buffer) {\n          self.sourceBuffer = buffer;\n          self.sourceStream = null; // The stream is now dead\n        })\n      }\n    }\n\n    // for _exec operations (identify() mostly), we also\n    // need to buffer the output stream before returning\n    if (bufferOutput) {\n      var stdout = ''\n        , stderr = ''\n        , onOut\n        , onErr\n        , onExit\n\n      proc.stdout.on('data', onOut = function (data) {\n        stdout += data;\n      });\n\n      proc.stderr.on('data', onErr = function (data) {\n        stderr += data;\n      });\n\n      proc.on('close', onExit = function (code, signal) {\n        let err;\n        if (code !== 0 || signal !== null) {\n          err = new Error('Command failed: ' + stderr);\n          err.code = code;\n          err.signal = signal;\n        };\n        cb(err, stdout, stderr, cmd);\n        stdout = stderr = onOut = onErr = onExit = null;\n      });\n    } else {\n      cb(null, proc.stdout, proc.stderr, cmd);\n    }\n\n    return self;\n\n    function cb (err, stdout, stderr, cmd) {\n      if (cb.called) return;\n      if (timeoutId) clearTimeout(timeoutId);\n      cb.called = 1;\n      if (args[0] !== 'identify' && bin !== 'identify') {\n        self._in = [];\n        self._out = [];\n      }\n      callback.call(self, err, stdout, stderr, cmd);\n    }\n\n    function dispose (msg) {\n      const message = msg ? msg : 'gm() was disposed';\n      const err = new Error(message);\n      cb(err);\n      if (proc.exitCode === null) {\n        proc.stdin.pause();\n        proc.kill();\n      }\n    }\n  }\n\n  /**\n   * Returns arguments to be used in the command.\n   *\n   * @return {Array}\n   */\n\n  proto.args = function args () {\n    var outname = this.outname || \"-\";\n  \tif (this._outputFormat) outname = this._outputFormat + ':' + outname;\n\n    return [].concat(\n        this._subCommand\n      , this._in\n      , this.src()\n      , this._out\n      , outname\n    ).filter(Boolean); // remove falsey\n  }\n\n  /**\n   * Adds an img source formatter.\n   *\n   * `formatters` are passed an array of images which will be\n   * used as 'input' images for the command. Useful for methods\n   * like `.append()` where multiple source images may be used.\n   *\n   * @param {Function} formatter\n   * @return {gm} this\n   */\n\n  proto.addSrcFormatter = function addSrcFormatter (formatter) {\n    if ('function' != typeof formatter)\n      throw new TypeError('sourceFormatter must be a function');\n    this._sourceFormatters || (this._sourceFormatters = []);\n    this._sourceFormatters.push(formatter);\n    return this;\n  }\n\n  /**\n   * Applies all _sourceFormatters\n   *\n   * @return {Array}\n   */\n\n  proto.src = function src () {\n    var arr = [];\n    for (var i = 0; i < this._sourceFormatters.length; ++i) {\n      this._sourceFormatters[i].call(this, arr);\n    }\n    return arr;\n  }\n\n  /**\n   * Image types.\n   */\n\n  var types = {\n      'jpg': /\\.jpe?g$/i\n    , 'png' : /\\.png$/i\n    , 'gif' : /\\.gif$/i\n    , 'tiff': /\\.tif?f$/i\n    , 'bmp' : /(?:\\.bmp|\\.dib)$/i\n    , 'webp': /\\.webp$/i\n  };\n\n  types.jpeg = types.jpg;\n  types.tif = types.tiff;\n  types.dib = types.bmp;\n\n  /**\n   * Determine the type of source image.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @example\n   *   if (this.inputIs('png')) ...\n   */\n\n  proto.inputIs = function inputIs (type) {\n    if (!type) return false;\n\n    var rgx = types[type];\n    if (!rgx) {\n      if ('.' !== type[0]) type = '.' + type;\n      rgx = new RegExp('\\\\' + type + '$', 'i');\n    }\n\n    return rgx.test(this.source);\n  }\n\n  /**\n   * add disposer (like 'close' of http.IncomingMessage) in order to dispose gm() with any event\n   *\n   * @param {EventEmitter} emitter\n   * @param {Array} events\n   * @return {Object} gm\n   * @example\n   *   command.addDisposer(req, ['close', 'end', 'finish']);\n   */\n\n  proto.addDisposer = function addDisposer (emitter, events) {\n    if (!this._options.disposers) {\n      this._options.disposers = [];\n    }\n    this._options.disposers.push({\n      emitter: emitter,\n      events: events\n    });\n    return this;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}