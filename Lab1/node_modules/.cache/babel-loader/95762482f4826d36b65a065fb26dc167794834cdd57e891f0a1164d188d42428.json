{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\n/**\n * Creates DOM element to be used as React root.\n */\nfunction createRootElement(id) {\n  var rootContainer = document.createElement('div');\n  rootContainer.setAttribute('id', id);\n  return rootContainer;\n}\n/**\n * Appends element as last child of body.\n */\n\nfunction addRootElement(rootElem) {\n  document.body.append(rootElem);\n}\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\n\nfunction usePortal(id) {\n  var rootElemRef = useRef(null);\n  useEffect(function () {\n    // Look for existing target dom element to append to\n    var existingParent = document.querySelector(\"#\".concat(id)); // Parent is either a new root or the existing dom element\n\n    var parentElem = existingParent || createRootElement(id); // If there is no existing DOM element, add a new one.\n\n    if (!existingParent) {\n      addRootElement(parentElem);\n    } // Add the detached element to the parent\n\n    if (rootElemRef.current) {\n      parentElem.append(rootElemRef.current);\n    }\n    return function removeElement() {\n      if (rootElemRef.current) {\n        rootElemRef.current.remove();\n      }\n      if (parentElem.childNodes.length === -1) {\n        parentElem.remove();\n      }\n    };\n  }, []);\n  /**\n   * It's important we evaluate this lazily:\n   * - We need first render to contain the DOM element, so it shouldn't happen\n   *   in useEffect. We would normally put this in the constructor().\n   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n   *   since this will run every single render (that's a lot).\n   * - We want the ref to consistently point to the same DOM element and only\n   *   ever run once.\n   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n   */\n\n  function getRootElem() {\n    if (!rootElemRef.current) {\n      rootElemRef.current = document.createElement('div');\n    }\n    return rootElemRef.current;\n  }\n  return getRootElem();\n}\nexport default usePortal;\nexport { usePortal };","map":{"version":3,"names":["useRef","useEffect","createRootElement","id","rootContainer","document","createElement","setAttribute","addRootElement","rootElem","body","append","usePortal","rootElemRef","existingParent","querySelector","concat","parentElem","current","removeElement","remove","childNodes","length","getRootElem"],"sources":["/home/redundunt/WebstormProjects/untitled/node_modules/@scaleflex/ui/hooks/use-portal.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Creates DOM element to be used as React root.\n */\nfunction createRootElement(id) {\n  var rootContainer = document.createElement('div');\n  rootContainer.setAttribute('id', id);\n  return rootContainer;\n}\n/**\n * Appends element as last child of body.\n */\n\n\nfunction addRootElement(rootElem) {\n  document.body.append(rootElem);\n}\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\n\n\nfunction usePortal(id) {\n  var rootElemRef = useRef(null);\n  useEffect(function () {\n    // Look for existing target dom element to append to\n    var existingParent = document.querySelector(\"#\".concat(id)); // Parent is either a new root or the existing dom element\n\n    var parentElem = existingParent || createRootElement(id); // If there is no existing DOM element, add a new one.\n\n    if (!existingParent) {\n      addRootElement(parentElem);\n    } // Add the detached element to the parent\n\n\n    if (rootElemRef.current) {\n      parentElem.append(rootElemRef.current);\n    }\n\n    return function removeElement() {\n      if (rootElemRef.current) {\n        rootElemRef.current.remove();\n      }\n\n      if (parentElem.childNodes.length === -1) {\n        parentElem.remove();\n      }\n    };\n  }, []);\n  /**\n   * It's important we evaluate this lazily:\n   * - We need first render to contain the DOM element, so it shouldn't happen\n   *   in useEffect. We would normally put this in the constructor().\n   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n   *   since this will run every single render (that's a lot).\n   * - We want the ref to consistently point to the same DOM element and only\n   *   ever run once.\n   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n   */\n\n  function getRootElem() {\n    if (!rootElemRef.current) {\n      rootElemRef.current = document.createElement('div');\n    }\n\n    return rootElemRef.current;\n  }\n\n  return getRootElem();\n}\n\nexport default usePortal;\nexport { usePortal };"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,EAAE,EAAE;EAC7B,IAAIC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACjDF,aAAa,CAACG,YAAY,CAAC,IAAI,EAAEJ,EAAE,CAAC;EACpC,OAAOC,aAAa;AACtB;AACA;AACA;AACA;;AAGA,SAASI,cAAcA,CAACC,QAAQ,EAAE;EAChCJ,QAAQ,CAACK,IAAI,CAACC,MAAM,CAACF,QAAQ,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASG,SAASA,CAACT,EAAE,EAAE;EACrB,IAAIU,WAAW,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9BC,SAAS,CAAC,YAAY;IACpB;IACA,IAAIa,cAAc,GAAGT,QAAQ,CAACU,aAAa,CAAC,GAAG,CAACC,MAAM,CAACb,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE7D,IAAIc,UAAU,GAAGH,cAAc,IAAIZ,iBAAiB,CAACC,EAAE,CAAC,CAAC,CAAC;;IAE1D,IAAI,CAACW,cAAc,EAAE;MACnBN,cAAc,CAACS,UAAU,CAAC;IAC5B,CAAC,CAAC;;IAGF,IAAIJ,WAAW,CAACK,OAAO,EAAE;MACvBD,UAAU,CAACN,MAAM,CAACE,WAAW,CAACK,OAAO,CAAC;IACxC;IAEA,OAAO,SAASC,aAAaA,CAAA,EAAG;MAC9B,IAAIN,WAAW,CAACK,OAAO,EAAE;QACvBL,WAAW,CAACK,OAAO,CAACE,MAAM,EAAE;MAC9B;MAEA,IAAIH,UAAU,CAACI,UAAU,CAACC,MAAM,KAAK,CAAC,CAAC,EAAE;QACvCL,UAAU,CAACG,MAAM,EAAE;MACrB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASG,WAAWA,CAAA,EAAG;IACrB,IAAI,CAACV,WAAW,CAACK,OAAO,EAAE;MACxBL,WAAW,CAACK,OAAO,GAAGb,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACrD;IAEA,OAAOO,WAAW,CAACK,OAAO;EAC5B;EAEA,OAAOK,WAAW,EAAE;AACtB;AAEA,eAAeX,SAAS;AACxB,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}