{"ast":null,"code":"/**\n * If your prop can be either a function or a plain value, this function handles\n * its usage for you â€“ just provide the reference for a 'maybe function' and the arguments\n * to call it with\n */\nexport function applyPolymorphicFunctionProp(prop) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return typeof prop === 'function' ? prop.apply(void 0, args) : prop;\n}","map":{"version":3,"names":["applyPolymorphicFunctionProp","prop","_len","arguments","length","args","Array","_key","apply"],"sources":["/home/redundunt/WebstormProjects/untitled/node_modules/@scaleflex/ui/utils/functions/apply-polymorphic-function-prop.js"],"sourcesContent":["/**\n * If your prop can be either a function or a plain value, this function handles\n * its usage for you â€“ just provide the reference for a 'maybe function' and the arguments\n * to call it with\n */\nexport function applyPolymorphicFunctionProp(prop) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return typeof prop === 'function' ? prop.apply(void 0, args) : prop;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,4BAA4BA,CAACC,IAAI,EAAE;EACjD,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAClC;EAEA,OAAO,OAAON,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACO,KAAK,CAAC,KAAK,CAAC,EAAEH,IAAI,CAAC,GAAGJ,IAAI;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}